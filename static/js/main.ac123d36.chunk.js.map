{"version":3,"sources":["logo.svg","Service.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SPARQLQueryDispatcher","endpoint","this","sparqlQuery","fullUrl","encodeURIComponent","fetch","headers","then","body","json","App","initialState","name","image","nacimiento","age","realAge","first","useState","person","setPerson","getAge","dateString","today","Date","birthDate","getFullYear","m","getMonth","getDate","loadItem","query","res","ripped","results","bindings","filter","x","RIP","console","dir","rnd","Math","floor","random","length","itemLabel","value","DR","initialLoad","className","style","width","display","onClick","src","alt","position","float","backgroundColor","bottom","padding","type","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,sICa5BC,E,WAZX,WAAYC,GAAW,oBACnBC,KAAKD,SAAWA,E,kDAGdE,GACF,IAAMC,EAAUF,KAAKD,SAAW,UAAYI,mBAAmBF,GAG/D,OAAOG,MAAMF,EAAS,CAAEG,QAFR,CAAE,OAAU,qCAEOC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,c,okBCsF9CC,MAzFf,WAEE,IAAMC,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,WAAY,GACZC,IAAK,KACLC,QAAS,KACTC,OAAM,GARK,EAUeC,mBAASP,GAVxB,mBAUNQ,EAVM,KAUEC,EAVF,KAwCPC,EAAS,SAACC,GACZ,IAAIC,EAAQ,IAAIC,KACZC,EAAY,IAAID,KAAKF,GACrBP,EAAMQ,EAAMG,cAAgBD,EAAUC,cACtCC,EAAIJ,EAAMK,WAAaH,EAAUG,WAIrC,OAHID,EAAI,GAAY,IAANA,GAAWJ,EAAMM,UAAYJ,EAAUI,YACnDd,IAEKA,GAGLe,EAAW,WACfV,EAAU,EAAD,GAAKD,EAAL,CAAYF,OAAM,KAzCT,WAClBG,EAAUT,GAac,IAAIZ,EAZR,qCAaJgC,MAZC,iWAYkBxB,MAAK,SAACyB,GACvC,IAAIC,EAASD,EAAIE,QAAQC,SAASC,QAAO,SAAAC,GAAC,OAAa,MAATA,EAAEC,OAChDC,QAAQC,IAAIP,GACZ,IAAIQ,EAAMR,EAAOS,KAAKC,MAAMD,KAAKE,SAAWX,EAAOY,SAEnDzB,EAAU,CACRR,KAAM6B,EAAIK,UAAUC,MACpBjC,WAAY2B,EAAIO,GAAGD,MACnBlC,MAAO4B,EAAI5B,MAAMkC,QACnBR,QAAQC,IAAIC,MAkBdQ,IAWF,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKC,MAAO,CAACC,MAAM,SACnB,4BAAQD,MAAO,CAAEE,QAAUlC,EAAOF,MAAS,SAAW,QAAUqC,QAASxB,GAAzE,QACA,yBAAKqB,MAAO,CAACC,MAAM,QAASG,IAAKpC,EAAON,MAAO2C,IAAI,MAEnD,yBAAKL,MAAO,CAACC,MAAO,OACxBK,SAAU,QACVC,MAAO,OACPC,gBAAiB,YACjBC,OAAQ,IACRC,QAAS,OACHR,QAAyB,IAAflC,EAAOP,KAAc,OAAS,UAC1C,4BAAQuC,MAAO,CAACE,QAAyB,IAAflC,EAAOP,MAAgC,MAAlBO,EAAOH,SAAsC,MAAlBG,EAAOH,QAAmB,SAAW,QAASsC,QAASxB,GAAjI,cACA,4BAAKX,EAAOP,MACZ,2BAAOkD,KAAK,SAASf,MAAO5B,EAAOJ,IAAKgD,SAxBzB,SAACC,GACpB5C,EAAU,EAAD,GAAKD,EAAL,CAAYJ,IAAKiD,EAAEC,OAAOlB,YAwB/B,4BAAQI,MAAO,CAACE,QAA2B,MAAlBlC,EAAOH,QAAkB,SAAW,QAASsC,QArB3D,WACflC,EAAU,EAAD,GAAMD,EAAN,CAAcH,QAASK,EAAO,IAAIG,KAAKL,EAAOL,kBAoBnD,OACA,wBAAIqC,MAAO,CAACE,QAA2B,MAAlBlC,EAAOH,QAAgB,OAAS,UAAWG,EAAOH,SAAWG,EAAOJ,IAAM,UAA/B,+BAAmEI,EAAOH,cC5E9HkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,MAAK,SAAAuE,GACjCA,EAAaC,kB","file":"static/js/main.ac123d36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","class SPARQLQueryDispatcher {\r\n    constructor(endpoint) {\r\n        this.endpoint = endpoint;\r\n    }\r\n\r\n    query(sparqlQuery) {\r\n        const fullUrl = this.endpoint + '?query=' + encodeURIComponent(sparqlQuery);\r\n        const headers = { 'Accept': 'application/sparql-results+json' };\r\n\r\n        return fetch(fullUrl, { headers }).then(body => body.json());\r\n    }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport SPARQLQueryDispatcher from './Service.js';\nimport './App.css';\n\n\nfunction App() {\n  \n  const initialState = {\n    name: \"\",\n    image: \"\",\n    nacimiento: \"\",\n    age: null,\n    realAge: null,\n    first:true\n  };\n  const [person, setPerson] = useState(initialState);\n  const initialLoad = ()=>{\n    setPerson(initialState);\n    const endpointUrl = 'https://query.wikidata.org/sparql';\n    const sparqlQuery = `SELECT ?item ?itemLabel ?DR ?image ?RIP\n    WHERE \n    {\n      ?item wdt:P27 wd:Q414.\n      ?item wdt:P569 ?DR . # P569 : Date of birth\n      ?item wdt:P18 ?image .\n      OPTIONAL{?item wdt:P570 ?RIP .}     # P570 : Date of death\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n    }\n    limit 10000`;\n    \n    const queryDispatcher = new SPARQLQueryDispatcher(endpointUrl);\n    queryDispatcher.query(sparqlQuery).then((res) =>{\n      var ripped = res.results.bindings.filter(x => x.RIP == null);\n      console.dir(ripped);\n      var rnd = ripped[Math.floor(Math.random() * ripped.length)];\n      debugger;\n      setPerson({\n        name: rnd.itemLabel.value,\n        nacimiento: rnd.DR.value,\n        image: rnd.image.value});\n      console.dir(rnd);\n    });\n    \n  };\n  \n  const getAge = (dateString) => {\n      var today = new Date();\n      var birthDate = new Date(dateString);\n      var age = today.getFullYear() - birthDate.getFullYear();\n      var m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      return age;\n  }\n\n  const loadItem = () => {\n    setPerson({...person,first:false});\n    initialLoad();\n  }\n\n  const handleChange = (e) => {\n    setPerson({...person,age: e.target.value});\n  }\n\n  const validate = () => {\n    setPerson({ ...person, realAge: getAge(new Date(person.nacimiento))})\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div style={{width:'100%'}}>\n        <button style={{ display: (person.first) ? \"inline\" : \"none\" }} onClick={loadItem}>{`Play`}</button>\n        <img style={{width:'100%'}} src={person.image} alt=\"\"/>\n        </div>\n        <div style={{width: '100%',\n    position: 'fixed',\n    float: 'left',\n    backgroundColor: '#8080806b',\n    bottom: '0',\n    padding: '10px',\n          display: (person.name == \"\") ? \"none\" : \"block\"}}>\n        <button style={{display: (person.name == \"\" && person.realAge == null) || person.realAge != null  ? \"inline\" : \"none\"}} onClick={loadItem}>Play Again</button>\n        <h3>{person.name}</h3>\n        <input type=\"number\" value={person.age} onChange={handleChange}/>\n        <button style={{display: person.realAge == null ? \"inline\" : \"none\"}} onClick={validate}>Try</button>\n        <h2 style={{display: person.realAge == null?\"none\" : \"block\"}}>{person.realAge == person.age ? \"CORRECT\" : `INCORRECT, he/she is ${person.realAge}`}</h2>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}